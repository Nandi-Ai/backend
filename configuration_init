import os
from jinja2 import Template
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import string
import random
import uuid


def create_db(db_user, db_password, db_host, db_name, port=5432, ):
    try:
        connection = psycopg2.connect(dbname='postgres',
                                      user=db_user, host=db_host,
                                      password=db_password,port=port)
        connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = connection.cursor()
        cursor.execute("CREATE DATABASE {}".format(db_name))
        return connection

    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL", error)
    finally:
        cursor.close()
        connection.close()


def randomStringwithDigitsAndSymbols(stringLength=50):
    """Generate a random string of letters, digits and special characters """
    password_characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(password_characters) for i in range(stringLength))


def render_template():
    db_name = os.environ['DB_NAME']
    db_user = os.environ['DB_USER']
    db_password = os.environ['DB_PASSWORD']
    db_instance = os.environ['DB_INSTANCE']
    django_secret = randomStringwithDigitsAndSymbols()
    user_token = uuid.uuid4().hex
    admin_token = uuid.uuid4().hex
    user_pool_id = os.environ['USER_POOL_ID']
    app_client_id = os.environ['APP_CLIENT_ID']
    jh_url = os.environ['JH_URL']
    aws_region = os.environ['AWS_REGION']
    with open('mainapp/local_settings.py.jl') as f:
        template = Template(f.read())
        new_template = template.render(DB_NAME=db_name,
                                       DB_USER=db_user,
                                       DB_PASSWORD=db_password,
                                       DB_INSTANCE=db_instance,
                                       DJANGO_SECRET=django_secret,
                                       USER_TOKEN=user_token,
                                       ADMIN_TOKEN=admin_token,
                                       USER_POOL_ID=user_pool_id,
                                       APP_CLIENT_ID=app_client_id,
                                       JH_URL=jh_url,
                                       AWS_REGION=aws_region)
    return new_template


def save_template(new_template):
    with open('mainapp/local_settings.py', 'w') as t:
        t.write(new_template)


def main():
    nt = render_template()
    save_template(nt)


    create_db(os.environ['DB_USER'],os.environ['DB_PASSWORD'],'lynx-asafdoctor.czugpxwo11j7.us-east-1.rds.amazonaws.com','lynx')
if __name__ == '__main__':
    main()
